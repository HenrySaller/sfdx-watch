'use strict';

const { existsSync, readFileSync } = require('fs');
const { basename } = require('path');
const { red, cyan, magenta } = require('ansi-colors');
const prettyTime = require('pretty-hrtime');
const gulp = require('gulp');
const { sync:sassSync } = require('gulp-sass');
const cssnano = require('gulp-cssnano');
const tap = require('gulp-tap');
const { spawn } = require('child_process');

function logError(message, error) {
  return console.log(`\n${red('Error')} ${message}.\n\n${error}`);
}

function Reporter() {
  let triggered = false;
  function report() {
    if (!triggered) {
      logError(
        'reading "sfdx-project" config',
        'Make sure that "sfdx-project.json" exists and is properly configured.\n' +
        'Assuming that a default "force-app" project is used.\n'
      );
      triggered = true;
    }
  }

  return { log: report }
}

function File(path, project) {
  this.path = path;
  this.exists = existsSync(path);
  this.defaultPackage = project;
  this.reporter = new Reporter();
}

const Config = (() => {
  return {
    sfdx: new File('./sfdx-project.json', 'force-app'),
    setFlags(val) {
      if (val && !this.flags) this.flags = val;
    },
    getFlag(elm) {
      if (this.flags) return this.flags[elm];
    }
  }
})();

function getProjectPath(ext) {
  const config = Config.sfdx.exists && JSON.parse(readFileSync(Config.sfdx.path, 'utf8'));
  const packageDirectories = config && config.packageDirectories;
  const withExt = (path) => './' + path + (ext ? '/**/*.' + ext : '/**/*');

  if (config && packageDirectories) {
    const packages = packageDirectories.map(pack => pack.path);
    const paths = packages.map(withExt);

    return paths;
  } else {
    Config.sfdx.reporter.log();

    return withExt(Config.sfdx.defaultPackage);
  }
}

function formatError(e) {
  if (!e.error) { return e.message; }
  if (typeof e.error.showStack === 'boolean') { return e.error.toString(); }
  if (e.error.stack) { return e.error.stack; }
  return new Error(String(e.error)).stack;
}

function logEvents(task) {
  console.log(`\n > Starting \'${cyan(task)}\' task`);

  gulp.on('start', (evt) => {
    console.log(` > Starting \'${cyan(evt.name)}\'...`);
  });

  gulp.on('stop', (evt) => {
    const time = prettyTime(evt.duration);
    console.log(` > Finished \'${cyan(evt.name)}\' after ${magenta(time)}`);
  });

  gulp.on('error', (evt) => {
    const msg = formatError(evt);
    const time = prettyTime(evt.duration);
    console.log(` > \'${cyan(evt.name)}\' ${red('errored')} after ${magenta(time)}`);
    console.log(`\n${msg}\n`);
  });
}

function scss() {
  return gulp.src(getProjectPath('{scss,sass}'))
    .pipe(sassSync().on('error', function(err) {
      logError('during "scss" compile', err.formatted);
      this.emit('end');
    }))
    .pipe(cssnano({
      zindex: false
    }))
    .pipe(tap(file => file.contents = Buffer.concat(
      [
        Buffer.from(
          `/* Do not edit this file directly.\n` +
          `   Please use ${basename(file.path, '.css')}.(scss|sass) instead. */\n\n`
        ), file.contents
      ]
    )))
    .pipe(gulp.dest(file => file.base));
}

function deploy(exit) {
  const log = [];
  const params = ['force:source:push'];
  const target = Config.getFlag('username');
  const cmd = 'sfdx' + (process.platform === 'win32' ? '.cmd' : '');

  if (target) params.push(`-u=${target}`);

  const cp = spawn(cmd, params);

  cp.stdout.on('data', data => log.push(data));
  cp.stderr.on('data', data => log.push(`Error: ${data}`));

  cp.on('close', (code) => (code !== 1) && console.log('\n' + log.join('')));
  cp.on('exit', (code) => {
    if (code === 1) {
      logError('during "sfdx" deploy', log.join(''));
      exit();
    }
  });

  return cp;
}

function watch(config = {}) {
  return new Promise((resolve, reject) => {
    if (config.logEnabled) logEvents('watch');
    if (config.flags) Config.setFlags(config.flags);

    gulp.watch(getProjectPath('{scss,sass}'), scss);
    gulp.watch(getProjectPath('!(scss|sass)'), deploy);

    gulp.on('error', (env) => reject(formatError(evt)));
  });
}

module.exports = { watch };
